package http_test

import (
	"bytes"
	"errors"
	"io"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestServer_ServeHTTP(t *testing.T) {
	tests := []struct {
		name           string
		method         string
		url            string
		handler        http.HandlerFunc
		wantStatusCode int
		wantBody       string
	}{
		{
			name:   "GET request",
			method: "GET",
			url:    "/test",
			handler: func(w http.ResponseWriter, r *http.Request) {
				w.WriteHeader(http.StatusOK)
				io.WriteString(w, "GET ok")
			},
			wantStatusCode: http.StatusOK,
			wantBody:       "GET ok",
		},
		{
			name:   "POST request with body",
			method: "POST",
			url:    "/post",
			handler: func(w http.ResponseWriter, r *http.Request) {
				body, _ := io.ReadAll(r.Body)
				w.WriteHeader(http.StatusCreated)
				io.WriteString(w, "POST received: "+string(body))
			},
			wantStatusCode: http.StatusCreated,
			wantBody:       "POST received: test body",
		},
		{
			name:   "Handler returns error",
			method: "GET",
			url:    "/error",
			handler: func(w http.ResponseWriter, r *http.Request) {
				http.Error(w, "internal server error", http.StatusInternalServerError)
			},
			wantStatusCode: http.StatusInternalServerError,
			wantBody:       "internal server error\n",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			req := httptest.NewRequest(tt.method, tt.url, strings.NewReader("test body"))
			rr := httptest.NewRecorder()

			handler := http.HandlerFunc(tt.handler)
			handler.ServeHTTP(rr, req)

			if status := rr.Code; status != tt.wantStatusCode {
				t.Errorf("handler returned wrong status code: got %v want %v",
					status, tt.wantStatusCode)
			}

			if responseBody := rr.Body.String(); responseBody != tt.wantBody {
				t.Errorf("handler returned unexpected body: got %v want %v",
					responseBody, tt.wantBody)
			}
		})
	}
}

func TestServer_ServeHTTP_Mock(t *testing.T) {
	mockResponseWriter := NewMockResponseWriter(t)
	mockResponseWriter.On("WriteHeader", http.StatusOK).Once()
	mockResponseWriter.On("Write", []byte("mock response")).Return(len("mock response"), nil).Once()

	req := httptest.NewRequest("GET", "/mock", nil)
	handler := func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("mock response"))
	}

	handler(mockResponseWriter, req)

	mockResponseWriter.AssertExpectations(t)
}

// MockResponseWriter is an autogenerated mock type for the http.ResponseWriter type
type MockResponseWriter struct {
	mock.Mock
}

func (m *MockResponseWriter) Header() http.Header {
	args := m.Called()
	return args.Get(0).(http.Header)
}

func (m *MockResponseWriter) Write(bytes []byte) (int, error) {
	args := m.Called(bytes)
	return args.Int(0), args.Error(1)
}

func (m *MockResponseWriter) WriteHeader(statusCode int) {
	m.Called(statusCode)
}

func NewMockResponseWriter(t *testing.T) *MockResponseWriter {
	return &MockResponseWriter{Mock: mock.Mock{}}
}